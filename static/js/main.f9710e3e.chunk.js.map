{"version":3,"sources":["components/QuoteMachine.js","App.js","index.js"],"names":["QuoteMachine","props","Card","CardContent","Typography","id","selectedQuote","quote","author","CardActions","Button","style","backgroundColor","colorHolder","color","textShadow","size","onClick","assignNewQuoteIndex","IconButton","href","encodeURI","target","icon","faTwitter","withStyles","container","display","height","alignItems","classes","useState","quotes","setQuotes","selectedQuoteIndex","setSelectedQuoteIndex","setColorHolder","getSelectedQuote","length","Number","isInteger","useEffect","a","fetch","data","json","random","fetchData","Grid","className","justify","xs","large","item","colorCode","generateNewQuoteIndex","ReactDOM","render","document","getElementById"],"mappings":"qWA6CeA,EAlCM,SAAAC,GAAK,OACxB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0BAAMC,GAAG,QAAQJ,EAAMK,cAAcC,OACrC,0BAAMF,GAAG,UAAT,MAAsBJ,EAAMK,cAAcE,UAG9C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,gBAAiBX,EAAMY,YACvBC,MAAO,OACPC,WAAY,qBAEdC,KAAK,QACLC,QAAShB,EAAMiB,oBACfb,GAAG,aARL,cAYA,kBAACc,EAAA,EAAD,CACEC,KAAMC,UAAU,yCAAD,OAC4BpB,EAAMK,cAAcC,MADhD,cAC2DN,EAAMK,cAAcE,OAD/E,6BAGfc,OAAO,SACPjB,GAAG,eAEH,kBAAC,IAAD,CAAiBkB,KAAMC,IAAWR,KAAK,WCiDhCS,kBAhFA,CACbC,UAAW,CACTC,QAAS,OACTC,OAAQ,QACRC,WAAY,WA4EDJ,EAxEf,YAA2B,IAAZK,EAAW,EAAXA,QAAW,EACIC,mBAAS,IADb,mBACjBC,EADiB,KACTC,EADS,OAE4BF,mBAAS,MAFrC,mBAEjBG,EAFiB,KAEGC,EAFH,OAGcJ,mBAAS,SAHvB,mBAGjBlB,EAHiB,KAGJuB,EAHI,KAiBxB,SAASC,IACP,GAAKL,EAAOM,QAAWC,OAAOC,UAAUN,GAGxC,OAAOF,EAAOE,GA6BhB,OA7CAO,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACqBC,MACjB,yIAFJ,cACQC,EADR,gBAIuBA,EAAKC,OAJ5B,OAIQb,EAJR,OAKEC,EAAUD,GACVG,EAAsBW,iBAAO,EAAGd,EAAOM,OAAS,IANlD,4CADc,uBAAC,WAAD,wBASdS,KACC,IAoCD,kBAACC,EAAA,EAAD,CACEC,UAAWnB,EAAQJ,UACnBf,MAAO,CACLC,gBAAiBC,GAEnBR,GAAG,YACH6C,QAAQ,SACRxB,WAAS,GACT,kBAACsB,EAAA,EAAD,CAAMG,GAAI,EAAGC,MAAO,EAAGC,MAAI,GACxBhB,IACC,kBAAC,EAAD,CACE/B,cAAe+B,IACfnB,oBA3BV,WACE,IAAMoC,EACJ,OACAR,iBAAO,EAAG,KACV,IACAA,iBAAO,EAAG,KACV,IACAA,iBAAO,EAAG,KACV,IACFV,EAAekB,GAEfnB,EArBF,WACE,GAAKH,EAAOM,OAGZ,OAAOQ,iBAAO,EAAGd,EAAOM,OAAS,GAiBXiB,KAiBd1C,YAAaA,IAEb,UC7EZ2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f9710e3e.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst QuoteMachine = props => (\n  <Card>\n    <CardContent>\n      <Typography>\n        <span id=\"text\">{props.selectedQuote.quote}</span>\n        <span id=\"author\"> - {props.selectedQuote.author}</span>\n      </Typography>\n    </CardContent>\n    <CardActions>\n      <Button\n        style={{\n          backgroundColor: props.colorHolder,\n          color: '#fff',\n          textShadow: '.5px .5px #707070'\n        }}\n        size=\"small\"\n        onClick={props.assignNewQuoteIndex}\n        id=\"new-quote\"\n      >\n        Next Quote\n      </Button>\n      <IconButton\n        href={encodeURI(\n          `https://twitter.com/intent/tweet?text=${props.selectedQuote.quote} - ${props.selectedQuote.author}&hashtags=CodingIsMyLife`\n        )}\n        target=\"_blank\"\n        id=\"tweet-quote\"\n      >\n        <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\n      </IconButton>\n    </CardActions>\n  </Card>\n);\n\nexport default QuoteMachine;\n","import React, { useState, useEffect } from 'react';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core';\n\nimport QuoteMachine from './components/QuoteMachine';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    height: '100vh',\n    alignItems: 'center',\n  },\n};\n\nfunction App({ classes }) {\n  const [quotes, setQuotes] = useState([]);\n  const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\n  const [colorHolder, setColorHolder] = useState('black');\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetch(\n        'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n      );\n      const quotes = await data.json();\n      setQuotes(quotes);\n      setSelectedQuoteIndex(random(0, quotes.length - 1));\n    }\n    fetchData();\n  }, []);\n\n  function getSelectedQuote() {\n    if (!quotes.length || !Number.isInteger(selectedQuoteIndex)) {\n      return undefined;\n    }\n    return quotes[selectedQuoteIndex];\n  }\n  /**\n   * Returns an integer between 0 and 102 representing an index in state.quotes\n   **/\n  function generateNewQuoteIndex() {\n    if (!quotes.length) {\n      return undefined;\n    }\n    return random(0, quotes.length - 1);\n  }\n\n  /**\n   * Sets the state for selectedQuoteIndex\n   **/\n  function assignNewQuoteIndex() {\n    const colorCode =\n      'rgb(' +\n      random(0, 256) +\n      ',' +\n      random(0, 256) +\n      ',' +\n      random(0, 256) +\n      ')';\n    setColorHolder(colorCode);\n\n    setSelectedQuoteIndex(generateNewQuoteIndex());\n  }\n\n  return (\n    <Grid\n      className={classes.container}\n      style={{\n        backgroundColor: colorHolder,\n      }}\n      id='quote-box'\n      justify='center'\n      container>\n      <Grid xs={8} large={6} item>\n        {getSelectedQuote() ? (\n          <QuoteMachine\n            selectedQuote={getSelectedQuote()}\n            assignNewQuoteIndex={assignNewQuoteIndex}\n            colorHolder={colorHolder}\n          />\n        ) : null}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}